#!/usr/bin/env bash

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.laptop.local` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

fancy_echo() {
  printf "\n%b\n" "$1"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="$2"

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if (( skip_new_line )); then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

if [[ "$SHELL" != */zsh ]]; then
  fancy_echo "Changing your shell to zsh ..."
    chsh -s $(which zsh)
fi

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local NAME=$(brew_expand_alias "$1")

  brew list -1 | grep -Fqx "$NAME"
}

brew_is_upgradable() {
  local NAME=$(brew_expand_alias "$1")

  brew outdated --quiet "$NAME" >/dev/null
  [[ $? -ne 0 ]]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local NAME=$(brew_expand_alias "$1")
  local DOMAIN="homebrew.mxcl.$NAME"
  local PLIST="$DOMAIN.plist"

  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/$NAME/$PLIST ~/Library/LaunchAgents

  if launchctl list | grep -q $DOMAIN; then
    launchctl unload ~/Library/LaunchAgents/$PLIST >/dev/null
  fi
  launchctl load ~/Library/LaunchAgents/$PLIST >/dev/null
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/install/master/install)

    append_to_zshrc '# recommended by brew doctor'
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

#fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
#  brew_install_or_upgrade 'the_silver_searcher'

#fancy_echo "Installing vim from Homebrew to get the latest version ..."
#  brew_install_or_upgrade 'vim'

#fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
#  brew_install_or_upgrade 'ctags'

#fancy_echo "Installing tmux, to save project state and switch between projects ..."
#  brew_install_or_upgrade 'tmux'

#fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
#  brew_install_or_upgrade 'reattach-to-user-namespace'

#fancy_echo "Installing ImageMagick, to crop and resize images ..."
#  brew_install_or_upgrade 'imagemagick'

#fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
#  brew_install_or_upgrade 'qt'

#fancy_echo "Installing watch, to execute a program periodically and show the output ..."
#  brew_install_or_upgrade 'watch'

#fancy_echo "Installing hub, hub helps you win at git ..."
#  brew_install_or_upgrade 'hub'

# Setup hub (v2.x)
# ==============================================================================
brew install --HEAD hub
alias git=hub
git version


fancy_echo "Installing java7 ..."
  brew_install_or_upgrade 'java7'

fancy_echo "Installing python ..."
  brew_install_or_upgrade 'python'

fancy_echo "Installing pyenv-virtualenv ..."
  brew_install_or_upgrade 'pyenv-virtualenv'

fancy_echo "Installing boot2docker ..."
  brew_install_or_upgrade 'boot2docker'

# replaced by hub?
#fancy_echo "Installing GitHub CLI client ..."
#  brew_install_or_upgrade 'gh'

node_version="0.10.33"

fancy_echo "Installing NVM, Node.js, and NPM, for running apps and installing JavaScript packages ..."
  brew_install_or_upgrade 'nvm'

  append_to_zshrc 'export PATH="$PATH:/usr/local/lib/node_modules"'
  append_to_zshrc 'source $(brew --prefix nvm)/nvm.sh' 1

  source $(brew --prefix nvm)/nvm.sh
  nvm install "$node_version"

  fancy_echo "Setting $node_version as the global default nodejs..."
  nvm alias default "$node_version"

#fancy_echo "Starting Postgres ..."
#  brew_launchctl_restart postgresql

if [[ ! -d "$HOME/.rbenv" ]]; then
  fancy_echo "Installing rbenv, to change Ruby versions ..."
    git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

    append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
    append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init - zsh)"
fi

if [[ ! -d "$HOME/.rbenv/plugins/rbenv-gem-rehash" ]]; then
  fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
    git clone https://github.com/sstephenson/rbenv-gem-rehash.git \
      ~/.rbenv/plugins/rbenv-gem-rehash
fi

if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
  fancy_echo "Installing ruby-build, to install Rubies ..."
    git clone https://github.com/sstephenson/ruby-build.git \
      ~/.rbenv/plugins/ruby-build
fi

fancy_echo "Upgrading and linking OpenSSL ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Installing Ruby $ruby_version ..."
  rbenv install -s "$ruby_version"

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing foreman ..."
  curl -sLo /tmp/foreman.pkg http://assets.foreman.io/foreman/foreman.pkg && \
  sudo installer -pkg /tmp/foreman.pkg -tgt /

if ! command -v rcup >/dev/null; then
  fancy_echo "Installing rcm, to manage your dotfiles ..."
    brew tap thoughtbot/formulae
    brew_install_or_upgrade 'rcm'
else
  fancy_echo "rcm already installed. Skipping ..."
fi

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi



brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_cask_is_installed() {
  local NAME=$(brew_cask_expand_alias "$1")
  brew cask list -1 | grep -Fqx "$NAME"
}

brew_cask_install() {
  if ! brew_cask_is_installed "$1"; then
    brew cask install "$@"
  fi
}

brew_cask_install_or_upgrade() {
  if brew_cask_is_installed "$1"; then
    echo "$1 is already installed, brew cask upgrade is not yet implemented"
  else
    brew cask install "$@"
  fi
}

brew tap caskroom/cask
brew_install_or_upgrade 'brew-cask'


fancy_echo "Installing alfred ..."
  brew_cask_install_or_upgrade 'alfred'

fancy_echo "Installing atom, a modern, approachable, and hackable to the core text editor..."
  brew_cask_install_or_upgrade 'atom'

fancy_echo "Installing caffeine, to execute a program periodically and show the output ..."
  brew_cask_install_or_upgrade 'caffeine'

fancy_echo "Installing dash, to execute a program periodically and show the output ..."
  brew_cask_install_or_upgrade 'dash'

fancy_echo "Installing dropbox ..."
  brew_cask_install_or_upgrade 'dropbox'

fancy_echo "Installing evernote ..."
  brew_cask_install_or_upgrade 'evernote'

fancy_echo "Installing firefox, to execute a program periodically and show the output ..."
  brew_cask_install_or_upgrade 'firefox'

fancy_echo "Installing intellij-idea-ce ..."
  brew_cask_install_or_upgrade 'intellij-idea-ce'

fancy_echo "Installing iterm2 ..."
  brew_cask_install_or_upgrade 'iterm2'

fancy_echo "Installing firefox ..."
  brew_cask_install_or_upgrade 'firefox'

fancy_echo "Installing github ..."
  brew_cask_install_or_upgrade 'github'

fancy_echo "Installing google-chrome ..."
  brew_cask_install_or_upgrade 'google-chrome'

fancy_echo "Installing mou ..."
  brew_cask_install_or_upgrade 'mou'

fancy_echo "Installing pycharm-ce ..."
  brew_cask_install_or_upgrade 'pycharm-ce'

fancy_echo "Installing skype ..."
  brew_cask_install_or_upgrade 'skype'

fancy_echo "Installing sublime-text-3 ..."
  brew_cask_install_or_upgrade 'sublime-text-3'

fancy_echo "Installing tunnelblick ..."
  brew_cask_install_or_upgrade 'tunnelblick'

fancy_echo "Installing vagrant ..."
  brew_cask_install_or_upgrade 'vagrant'

fancy_echo "Installing vagrant-manager ..."
  brew_cask_install_or_upgrade 'vagrant-manager'

fancy_echo "Installing virtualbox ..."
  brew_cask_install_or_upgrade 'virtualbox'


# install vagrant plugins
vagrant plugin install vagrant-parallels



# Add Sublime Text CLI
# ==============================================================================
mkdir -p ~/bin && ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" ~/bin/subl


# Setup Github
# ==============================================================================
ssh-keygen -t rsa -C "jay.ruffing@blueshieldca.com"

# Copy ssh key to github.com
subl ~/.ssh/id_rsa.pub

# Test connection
ssh -T git@github.com

# Set git config values
git config --global user.name "Jay Ruffing"
git config --global user.email "jay.ruffing@blueshieldca.com"
git config --global github.user jruffing
git config --global github.token myToken

git config --global core.editor "subl -w"
git config --global color.ui true


# setup appium dev envt
# ==============================================================================
#brew tap jruffing/homebrew-cask
brew cask install jruffing/homebrew-cask/appium

# setup appium dev env
npm install -g mocha
npm install -g grunt-cli

cd '~/'
git fork https://github.com/appium/appium
git clone github/$github.user

cd 'appium'
sudo ./bin/authorize-ios.js
node bin/appium-doctor.js --dev --ios
#sudo grunt authorize
./reset.sh --ios --dev
node .