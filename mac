#!/usr/bin/env bash

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  printf "\n%b\n" "$1"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="$2"

  if [[ -w "$HOME/.zshrc.local" ]]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if (( skip_new_line )); then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

if [[ "$SHELL" != /usr/local/bin/zsh ]]; then
  fancy_echo "Changing your shell to homebrew zsh..."
    if [ ! -e /usr/local/bin/zsh ]; then
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells
    chsh -s "/usr/local/bin/zsh"
    #exec zsh
fi

###############################################################################
# brew & brew-cask stuff                                                      #
###############################################################################

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local NAME=$(brew_expand_alias "$1")

  brew list -1 | grep -Fqx "$NAME"
}

brew_is_upgradable() {
  local NAME=$(brew_expand_alias "$1")

  brew outdated --quiet "$NAME" >/dev/null
  [[ $? -ne 0 ]]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local NAME=$(brew_expand_alias "$1")
  local DOMAIN="homebrew.mxcl.$NAME"
  local PLIST="$DOMAIN.plist"

  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/$NAME/$PLIST ~/Library/LaunchAgents

  if launchctl list | grep -q $DOMAIN; then
    launchctl unload ~/Library/LaunchAgents/$PLIST >/dev/null
  fi
  launchctl load ~/Library/LaunchAgents/$PLIST >/dev/null
}

if ! command -v brew >/dev/null; then
  fancy_echo "
==============================
What's up Homebrew? Installing you a pretty awesome OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/install/master/install)

    append_to_zshrc '# recommended by brew doctor'
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "You already know what's up Homebrew...Homebrew is already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ...
==============================
"
# in case of multiple users
# might need to do
#  if permission denied to brew update then drastic measures:
#    rm -rf /usr/local/ && brew cleanup
#    sudo chmod -R 775 /usr/local/
#    sudo chown -R $USER:staff /Library/Caches/Homebrew/
brew update

brew tap caskroom/cask
brew install brew-cask

brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_cask_is_installed() {
  local NAME=$(brew_cask_expand_alias "$1")
  brew cask list -1 | grep -Fqx "$NAME"
}

brew_cask_install() {
  if ! brew_cask_is_installed "$1"; then
    brew cask install "$@"
  fi
}

brew_cask_install_or_upgrade() {
  if brew_cask_is_installed "$1"; then
    echo "$1 is already installed, brew cask upgrade is not yet implemented"
  else
    brew cask install "$@"
  fi
}

fancy_echo "
###############################################################################
# text editor                                                                 #
###############################################################################
"



fancy_echo "
###############################################################################
# github stuff                                                                #
###############################################################################
"
git()
{
   local tmp=$(mktemp)
   local repo_name

   if [ "$1" = clone ] ; then
     /usr/bin/git "$@" | tee $tmp
     repo_name=$(awk -F\' '/Cloning into/ {print $2}' $tmp)
     rm $tmp
     echo "changing to directory %s\n" "$repo_name"
     cd "$repo_name"
   else
     /usr/bin/git "$@"
   fi
}

fancy_echo "Git your updated git on...
=============================="
brew_install_or_upgrade 'git'

# replaced by hub? not sure this is still needed
#fancy_echo "Installing GitHub CLI client ..."
#  brew_install_or_upgrade 'gh'


fancy_echo "
###############################################################################
# java dev env                                                                *
###############################################################################
"

fancy_echo "giving you a java dev env"

fancy_echo "Installing java 7 jdk...
=============================="
#  brew cask install caskroom/versions/java7

fancy_echo "
==============================
Installing java 8 jdk..."
#  brew_cask_install_or_upgrade 'java'

fancy_echo "Installing maven...
=============================="
#  brew_install_or_upgrade 'maven'

fancy_echo "Installing ant...
=============================="

#  brew_install_or_upgrade 'ant'

fancy_echo "Installing gradle...
=============================="
#  brew_install_or_upgrade 'gradle'

fancy_echo "Installing intellij-idea-ce...
=============================="
#  brew_cask_install_or_upgrade 'intellij-idea-ce'

fancy_echo "finished with your java dev env...go to java town
=============================="


fancy_echo "
###############################################################################
# python dev env                                                              #
###############################################################################
"

fancy_echo "giving you a python dev env..."

fancy_echo "Installing python...
=============================="
  brew_install_or_upgrade 'python'

fancy_echo "Installing pyenv-virtualenv...
=============================="
  brew_install_or_upgrade 'pyenv-virtualenv'

fancy_echo "Installing pycharm-ce ...
=============================="
  brew_cask_install_or_upgrade 'pycharm-ce'

fancy_echo "finished with your python dev env...go to python town"

fancy_echo "
###############################################################################
# virtual environments                                                        #
###############################################################################
"

fancy_echo "giving you some virtual env love..."

fancy_echo "Installing boot2docker ...
=============================="
#  brew_install_or_upgrade 'boot2docker'

fancy_echo "Installing vagrant ...
=============================="
#  brew_cask_install_or_upgrade 'vagrant'

fancy_echo "Installing vagrant-manager ...
=============================="
#  brew_cask_install_or_upgrade 'vagrant-manager'

fancy_echo "Installing virtualbox ...
=============================="
#  brew_cask_install_or_upgrade 'virtualbox'

fancy_echo "install and update vagrant plugins ...
=============================="
#vagrant plugin install vagrant-salt
#vagrant plugin install vagrant-lxc
#vagrant plugin update

fancy_echo "finished with your virtual envs...go to virtual town"

fancy_echo "
###############################################################################
# node dev env                                                                #
###############################################################################
"

fancy_echo "giving you a nodejs dev env ...
=============================="
node_version="0.10.33"

fancy_echo "Installing NVM, Node.js, and NPM, for running apps and installing JavaScript packages ...
=============================="
  brew_install_or_upgrade 'nvm'

fancy_echo "Installing Node ...
=============================="

  brew_install_or_upgrade 'node'

export NODE_PATH="/usr/local/lib/node"
export PATH="/usr/local/share/npm/bin:$PATH"

npm install -g mocha
npm install -g grunt-cli

  append_to_zshrc 'export PATH="$PATH:/usr/local/lib/node_modules"'
  append_to_zshrc 'source $(brew --prefix nvm)/nvm.sh' 1

  source $(brew --prefix nvm)/nvm.sh
  nvm install "$node_version"

  fancy_echo "Setting $node_version as the global default nodejs...
  =============================="
  nvm alias default "$node_version"

fancy_echo "finished with your nodejs dev env...go to node town"


fancy_echo "
###############################################################################
# ruby dev env                                                                #
###############################################################################
"

fancy_echo "installing RVM for ya ...
=============================="
#\curl -L https://get.rvm.io | bash -s stable --ruby --autolibs=enable

if [[ ! -d "$HOME/.rbenv" ]]; then
  fancy_echo "Installing rbenv, to change Ruby versions ..."
    #git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
    brew install rbenv

    append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
    append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init - zsh)"
fi

if [[ ! -d "$HOME/.rbenv/plugins/rbenv-gem-rehash" ]]; then
  fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
    brew install rbenv-gem-rehash
    #git clone https://github.com/sstephenson/rbenv-gem-rehash.git \
    #  ~/.rbenv/plugins/rbenv-gem-rehash
fi

if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
  fancy_echo "Installing ruby-build, to install Rubies ..."
    brew install ruby-build
    #git clone https://github.com/sstephenson/ruby-build.git \
    #  ~/.rbenv/plugins/ruby-build
fi

fancy_echo "I don't want your heart to bleed...updating OpenSSL...
=============================="
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force

  ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Installing Ruby $ruby_version w/ rbenv...
=============================="
  rbenv install -s "$ruby_version"

fancy_echo "sourcing your shell, one sec please ...
=============================="
  source ~/.zshrc

fancy_echo "Setting $ruby_version as global default Ruby ...
=============================="
  rbenv global "$ruby_version"
  echo 'eval "$(rbenv init - )"' >> ~/.bash_profile
  rbenv rehash
  echo "ruby version: " ruby -v

fancy_echo "Updating to latest Rubygems version...
=============================="
  gem update --system

fancy_echo "Installing cocoapods for iOS dev...
=============================="
  gem install cocoapods

fancy_echo "Installing tmuxinator for iOS dev...
=============================="
  gem install tmuxinator

fancy_echo "Installing Bundler to install project-specific Ruby gems...
=============================="
  gem install bundler --no-document --pre

fancy_echo "Configuring Bundler for faster, parallel gem installation...
=============================="
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing foreman...
=============================="
  curl -sLo /tmp/foreman.pkg http://assets.foreman.io/foreman/foreman.pkg && \
  sudo installer -pkg /tmp/foreman.pkg -tgt /

fancy_echo "
###############################################################################
# shell stuff                                                                 #
###############################################################################
"

fancy_echo "update to latest bash shell...
==============================
update bash to try to avoid future shellshock type of issues"
  brew_install_or_upgrade 'bash'

# zsh functionality
fancy_echo "
==============================
injecting your awesome zsh with steroids... "
fancy_echo "installing yadr and its dependencies: https://github.com/skwp/dotfiles"
if [[ ! -d ~/.yadr ]]; then
  cd ~
  git clone https://github.com/skwp/dotfiles ~/.yadr
  cd ~/.yadr & rake install
else
  cd ~/.yadr
  git pull --rebase
  rake update
fi

fancy_echo "
==============================
Create a ~/.secrets file (required by YADR)"
touch ~/.secrets

#fancy_echo "installing powerline prompt...
#==============================
#a theme for prezto: https://github.com/davidjrice/prezto_powerline"
#curl https://raw.github.com/davidjrice/prezto_powerline/master/prompt_powerline_setup > ~/.zsh.prompts/prompt_powerline_setup


fancy_echo "beautifying your awesome zsh shell for you...
==============================


fancy_echo "setting agnoster theme...
=============================="
prompt agnoster

fancy_echo "
==============================
installing adobe source code pro font for zsh"
brew cask install caskroom/fonts/font-source-code-pro

fancy_echo "
==============================
Installing iterm2 ..."
  brew_cask_install_or_upgrade 'iterm2'

#fancy_echo "
#==============================
#Installing tmux, to save project state and switch between projects ..."
#brew_install_or_upgrade 'tmux'


fancy_echo "
###############################################################################
# misc stuff                                                                  #
###############################################################################
"

fancy_echo "installing pt...
==============================
a minimal client to use Pivotal Tracker from the console"
  gem install pt



#if ! command -v rcup >/dev/null; then
#  fancy_echo "Installing rcm, to manage your dotfiles ..."
#    brew tap thoughtbot/formulae
#    brew_install_or_upgrade 'rcm'
#else
#  fancy_echo "rcm already installed. Skipping ..."
#fi

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi